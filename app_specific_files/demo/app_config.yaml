jupiter_config:
  # Jupiter subsystems will be deployed in separate k8s namespaces. Using
  # different prefixes allows multiple users to use the same k8s cluster.
  # e.g. prefix "jason" results in namespaces:
  # jason-exec
  # jason-circe
  # jason-profiler
  # jason-mapper
  namespace_prefix: zxc
  # Docker registry prefix for pulling and pushing images. Set to empty string for
  # Docker Hub. Examples: "anrg", "docker.io/anrg", "gcr.io/organization_name", ""
  docker_registry: quay.io/anrgusc
  # Choose mapper: "heft", "heft_balance", or "wave" (not yet supported)
  task_mapper: heft
  # Choose CIRCE dispatcher type: "original" (currently the only supported)
  circe: original
node_map:
  # "home" is required. All other names should be "node*" where * is some
  # integer.
  home: master
  node1: node0-0-0
  node2: node0-0-1
  node3: node0-0-2
  node4: node0-0-3
  node5: node0-0-4
  node6: node0-1-0
  node7: node0-1-1
  node8: node0-1-2
  node9: node0-1-3
  node10: node0-1-4
  node11: node0-2-0
  node12: node0-2-1
  node13: node0-2-2
  node14: node0-2-3
  node15: node0-2-4
  node16: node0-3-0
  node17: node0-3-1
  node18: node0-3-2
  node19: node0-3-3
  node20: node0-3-4
  node21: node0-4-0
  node22: node0-4-1
  node23: node0-4-2
  node24: node0-4-3
  node25: node0-4-4
  node26: node1-0-0
  node27: node1-0-1
  node28: node1-0-2
  node29: node1-0-3
  node30: node1-0-4
  node31: node1-1-0
  node32: node1-1-1
  node33: node1-1-2
  node34: node1-1-3
  node35: node1-1-4
  node36: node1-2-0
  node37: node1-2-1
  node38: node1-2-2
  node39: node1-2-3
  node40: node1-2-4
  node41: node1-3-0
  node42: node1-3-1
  node43: node1-3-2
  node44: node1-3-3
  node45: node1-3-4
  node46: node1-4-0
  node47: node1-4-1
  node48: node1-4-2
  node49: node1-4-3
  node50: node1-4-4
  node51: node2-0-0
  node52: node2-0-1
  node53: node2-0-2
  node54: node2-0-3
  node55: node2-0-4
  node56: node2-1-0
  node57: node2-1-1
  node58: node2-1-2
  node59: node2-1-3
  node60: node2-1-4
  node61: node2-2-0
  node62: node2-2-1
  node63: node2-2-2
  node64: node2-2-3
  node65: node2-2-4
  node66: node2-3-0
  node67: node2-3-1
  node68: node2-3-2
  node69: node2-3-3
  node70: node2-3-4
  node71: node2-4-0
  node72: node2-4-1
  node73: node2-4-2
  node74: node2-4-3
  node75: node2-4-4
application:
  # List of port mappings in format. Used for creating additional k8s services
  # for your application. i.e., "9000:8000" will create a service with port 9000
  # which targets port 8000 in all application containers.
  # Note: [PORT_MAPPINGS] section in jupiter_config.ini cannot be used.
  port_mappings:
  first_task: master
  # Sample file path used in wave mapper 
  sample_file: sample_inputs/home_master_1imgfireengine.JPEG
  tasks:
    home:
      base_script: home.py
      children:
    nondag_tasks:
    - name: datasource1
      base_script: datasource.py
      k8s_host: n0-0-0
      children: master
        # Only home or dag_tasks allowed under children
    - name: datasource2
      base_script: datasource.py
      k8s_host: n1-1-1
      children: master
    - name: globalinfo
      base_script: globalinfo.py
      k8s_host: n2-2-2
      children:
    dag_tasks:
      - name: master
        base_script: master.py
        children:  # child order determines round robin sequence
          - resnet0
          - resnet1
          - resnet2
          - resnet3
          - resnet4
          - resnet5
          - resnet6
          - resnet7
          - resnet8
          - collage
      - name: resnet0
        base_script: resnet.py
        children:
          - storeclass1
          - storeclass2
      - name: resnet1
        base_script: resnet.py
        children:
          - storeclass1
          - storeclass2
      - name: resnet2
        base_script: resnet.py
        children:
          - storeclass1
          - storeclass2
      - name: resnet3
        base_script: resnet.py
        children:
          - storeclass1
          - storeclass2
      - name: resnet4
        base_script: resnet.py
        children:
          - storeclass1
          - storeclass2
      - name: resnet5
        base_script: resnet.py
        children:
          - storeclass1
          - storeclass2
      - name: resnet6
        base_script: resnet.py
        children:
          - storeclass1
          - storeclass2
      - name: resnet7
        base_script: resnet.py
        children:
          - storeclass1
          - storeclass2
      - name: resnet8
        base_script: resnet.py
        children:
          - storeclass1
          - storeclass2
      - name: collage
        base_script: collage.py
        children: 
      - name: storeclass1
        base_script: storeclass.py
        children:
          - lccenc1
      - name: storeclass2
        base_script: storeclass.py
        children:
          - lccenc2
      - name: lccenc1
        base_script: lccenc.py
        children:
          - score1a
          - score1b
          - score1c
      - name: lccenc2
        base_script: lccenc.py
        children:
          - score2a
          - score2b
          - score2c
      - name: score1a
        base_script: score.py
        children:
          - preagg1
      - name: score1b
        base_script: score.py
        children:
          - preagg1
      - name: score1c
        base_script: score.py
        children:
          - preagg1
      - name: score2a
        base_script: score.py
        children:
          - preagg2
      - name: score2b
        base_script: score.py
        children:
          - preagg2
      - name: score2c
        base_script: score.py
        children:
          - preagg2
      - name: preagg1
        base_script: preagg.py
        children:
          - lccdec1
      - name: preagg2
        base_script: preagg.py
        children:
          - lccdec2
      - name: lccdec1
        base_script: lccdec.py
        children:
          - home
      - name: lccdec2
        base_script: lccdec.py
        children:
          - home
