jupiter_config:
  # Jupiter subsystems will be deployed in separate k8s namespaces. Using
  # different prefixes allows multiple users to use the same k8s cluster.
  # e.g. prefix "jason" results in namespaces:
  # jason-exec
  # jason-circe
  # jason-profiler
  # jason-mapper
  namespace_prefix: quynh
  # Docker registry prefix for pulling and pushing images. Set to empty string for
  # Docker Hub. Examples: "anrg", "docker.io/anrg", "gcr.io/organization_name", ""
  docker_registry: anrg
  # Choose mapper: "heft", "heft_balance", or "wave" (not yet supported)
  task_mapper: heft
  # Choose CIRCE dispatcher type: "original" (currently the only supported)
  circe: original
node_map:
  # "home" is required. All other names should be "node*" where * is some
  # integer.
  home: n0
  node1: n1
  node2: n2
  node3: n3
  node4: n4
  node5: n5
application:
  # List of port mappings in format. Used for creating additional k8s services
  # for your application. i.e., "9000:8000" will create a service with port 9000
  # which targets port 8000 in all application containers.
  # Note: [PORT_MAPPINGS] section in jupiter_config.ini cannot be used.
  port_mappings:
  tasks:
    home:
      base_script: home.py
      children:
    nondag_tasks:
    - name: datasource1
      base_script: datasource.py
      k8s_host: n6
      children: master
        # Only home or dag_tasks allowed under children
    - name: datasource2
      base_script: datasource.py
      k8s_host: n7
      children: master
    dag_tasks:
      - name: master
        base_script: master.py
        children:  # child order determines round robin sequence
          - resnet0
          - resnet1
          - resnet2
          - resnet3
          - resnet4
          - resnet5
          - resnet6
          - resnet7
          - resnet8
          - collage
      - name: resnet0
        base_script: resnet.py
        children:
          - storeclass1
          - storeclass2
      - name: resnet1
        base_script: resnet.py
        children:
          - storeclass1
          - storeclass2
      - name: resnet2
        base_script: resnet.py
        children:
          - storeclass1
          - storeclass2
      - name: resnet3
        base_script: resnet.py
        children:
          - storeclass1
          - storeclass2
      - name: resnet4
        base_script: resnet.py
        children:
          - storeclass1
          - storeclass2
      - name: resnet5
        base_script: resnet.py
        children:
          - storeclass1
          - storeclass2
      - name: resnet6
        base_script: resnet.py
        children:
          - storeclass1
          - storeclass2
      - name: resnet7
        base_script: resnet.py
        children:
          - storeclass1
          - storeclass2
      - name: resnet8
        base_script: resnet.py
        children:
          - storeclass1
          - storeclass2
      - name: collage
        base_script: collage.py
        children: 
      - name: storeclass1
        base_script: storeclass.py
        children:
          - lccenc1
      - name: storeclass2
        base_script: storeclass.py
        children:
          - lccenc2
      - name: lccenc1
        base_script: lccenc.py
        children:
          - score1a
          - score1b
          - score1c
      - name: lccenc2
        base_script: lccenc.py
        children:
          - score2a
          - score2b
          - score2c
      - name: score1a
        base_script: score.py
        children:
          - preagg1
      - name: score1b
        base_script: score.py
        children:
          - preagg1
      - name: score1c
        base_script: score.py
        children:
          - preagg1
      - name: score2a
        base_script: score.py
        children:
          - preagg2
      - name: score2b
        base_script: score.py
        children:
          - preagg2
      - name: score2c
        base_script: score.py
        children:
          - preagg2
      - name: preagg1
        base_script: preagg.py
        children:
          - lccdec1
      - name: preagg2
        base_script: preagg.py
        children:
          - lccdec2
      - name: lccdec1
        base_script: lccdec.py
        children:
          - home
      - name: lccdec2
        base_script: lccdec.py
        children:
          - home