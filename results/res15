==================
Start the HEFT scheduler
Running Schedule
#############################################################################################
                                   result for tpheft
#############################################################################################
==============================================
               print task info
==============================================
task_number            task_uprank
(0, '              ', 9168.067108753427)
(2, '              ', 6115.06036498691)
(3, '              ', 5649.952023246416)
(1, '              ', 5276.185535969888)
(5, '              ', 4980.326168331519)
(4, '              ', 4444.877721218881)
(6, '              ', 3140.5843533637026)
(7, '              ', 2621.476011623208)
(8, '              ', 1641.8041538003479)
(9, '              ', 290)
==============================================
               print processor info
==============================================
processor_number     task_number     start_time     end_time
('     ', 1, '      ', 0, '    ', 0, '    ', 960)
('     ', 2, '      ', 1, '    ', 0, '    ', 873)
('     ', 3, '      ', 2, '    ', 0, '    ', 806)
('     ', 4, '      ', 3, '    ', 0, '    ', 582)
('     ', 5, '      ', 4, '    ', 0, '    ', 704)
('     ', 6, '      ', 5, '    ', 0, '    ', 548)
('     ', 8, '      ', 7, '    ', 0, '    ', 281)
('     ', 9, '      ', 8, '    ', 0, '    ', 181)
('     ', 10, '      ', 9, '    ', 0, '    ', 183)
('     ', 28, '      ', 6, '    ', 0, '    ', 950)
==============================================
               print link info
==============================================
link_name    start_task_num   end_task_num   start_time   end_time
('1_2', '      ', 0, '      ', 1, '       ', 0, '      ', 372.7059194690373)
('1_3', '      ', 0, '      ', 2, '       ', 0, '      ', 234.27733086258408)
('1_4', '      ', 0, '      ', 3, '       ', 0, '      ', 292.1713857378045)
('1_5', '      ', 0, '      ', 4, '       ', 0, '      ', 290.0012257155797)
('1_6', '      ', 0, '      ', 5, '       ', 0, '      ', 281.1373707537686)
('2_8', '      ', 1, '      ', 7, '       ', 0, '      ', 228.7307927916072)
('2_9', '      ', 1, '      ', 8, '       ', 0, '      ', 317.5260221679795)
('3_28', '      ', 2, '      ', 6, '       ', 0, '      ', 6023.333332270619)
('4_8', '      ', 3, '      ', 7, '       ', 0, '      ', 304.4910794214727)
('4_9', '      ', 3, '      ', 8, '       ', 0, '      ', 928.398021398034)
('5_9', '      ', 4, '      ', 8, '       ', 0, '      ', 474.6085670664503)
('6_8', '      ', 5, '      ', 7, '       ', 0, '      ', 191.01288690406273)
('8_10', '      ', 7, '      ', 9, '       ', 0, '      ', 202.90576461568656)
('9_10', '      ', 8, '      ', 9, '       ', 0, '      ', 279.1586078914887)
('28_10', '      ', 6, '      ', 9, '       ', 0, '      ', 4926.045497413188)

-------------------------------
current system bottleneck: 3_28
task ids to dup, task ids to recv, files_to_dst, files_from_src
[2]
[6]
[36864]
{1: [32768]}
procid to max time
{0: 6040.202588344877, 7: 5600.73067375513, 11: 5369.559964785922, 12: 5813.7157010473475, 13: 5737.223640936234, 14: 5734.083735395544, 15: 5485.105697975119, 16: 5502.611853487562, 17: 6075.308892318407, 18: 5775.989934539277, 19: 5565.684917777227, 20: 5506.704317921074, 21: 5857.636612847627, 22: 6680.352261226195, 23: 5881.988220952782, 24: 5827.76714866568, 25: 5821.259040010122, 26: 5398.973453268891, 27: 5290.489967837699, 29: 5282.404020155383}
chosen node id, min btnk, task ids to dup, tak ids to recv, parent tasks, files to dest, files from src
(29, 5282.404020155383, [2], [6], [0], [36864], {1: [32768]})
-------------------------------
Conclusion for this round of duplication: chose new node and duplicate following tasks on it
(29, [2])
task numbers: ori to dup, dup to ori
{2: 10}
{10: 2}
original data matrix
[[-1, 32768, 32768, 32768, 32768, 32768, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 28672, 28672, -1], [-1, -1, -1, -1, -1, -1, 36864, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 36864, 36864, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 53248, -1], [-1, -1, -1, -1, -1, -1, -1, 16384, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 24576], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 36864], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 8192], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]]
updated data transfer matrix with task duplication
[[-1, 32768, 32768, 32768, 32768, 32768, -1, -1, -1, -1, 32768], [-1, -1, -1, -1, -1, -1, -1, 28672, 28672, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 36864, 36864, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 53248, -1, -1], [-1, -1, -1, -1, -1, -1, -1, 16384, -1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 24576, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 36864, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, 8192, -1], [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], [-1, -1, -1, -1, -1, -1, 36864, -1, -1, -1, -1]]
updated task names with dupicated tasks
['task0', 'task1', 'task2', 'task3', 'task4', 'task5', 'task6', 'task7', 'task8', 'task9', 'task2-dup']
new_link to dst
29_28
(10, ' ', 6, ' ', 0, ' ', 248.51380148122834)
new_link from parents
1_29
(0, ' ', 10, ' ', 0, ' ', 5282.404020155383)



Output of HEFT scheduler
#############################################################################################
                                 result for rand + dup
#############################################################################################
==============================================
               print task info
==============================================
task_number            task_uprank
(0, '              ', 9168.067108753427)
(2, '              ', 6115.06036498691)
(3, '              ', 5649.952023246416)
(1, '              ', 5276.185535969888)
(5, '              ', 4980.326168331519)
(4, '              ', 4444.877721218881)
(6, '              ', 3140.5843533637026)
(7, '              ', 2621.476011623208)
(8, '              ', 1641.8041538003479)
(9, '              ', 290)
(10, '              ', 6115.06036498691)
==============================================
               print processor info
==============================================
processor_number     task_number     start_time     end_time
('     ', 1, '      ', 0, '    ', 0, '    ', 960)
('     ', 2, '      ', 1, '    ', 0, '    ', 873)
('     ', 3, '      ', 2, '    ', 0, '    ', 806)
('     ', 4, '      ', 3, '    ', 0, '    ', 582)
('     ', 5, '      ', 4, '    ', 0, '    ', 704)
('     ', 6, '      ', 5, '    ', 0, '    ', 548)
('     ', 8, '      ', 7, '    ', 0, '    ', 281)
('     ', 9, '      ', 8, '    ', 0, '    ', 181)
('     ', 10, '      ', 9, '    ', 0, '    ', 183)
('     ', 28, '      ', 6, '    ', 0, '    ', 950)
('     ', 29, '      ', 10, '    ', 0, '    ', 498)
==============================================
               print link info
==============================================
link_name    start_task_num   end_task_num   start_time   end_time
('1_2', '      ', 0, '      ', 1, '       ', 0, '      ', 372.7059194690373)
('1_3', '      ', 0, '      ', 2, '       ', 0, '      ', 234.27733086258408)
('1_4', '      ', 0, '      ', 3, '       ', 0, '      ', 292.1713857378045)
('1_5', '      ', 0, '      ', 4, '       ', 0, '      ', 290.0012257155797)
('1_6', '      ', 0, '      ', 5, '       ', 0, '      ', 281.1373707537686)
('1_29', '      ', 0, '      ', 10, '       ', 0, '      ', 5282.404020155383)
('2_8', '      ', 1, '      ', 7, '       ', 0, '      ', 228.7307927916072)
('2_9', '      ', 1, '      ', 8, '       ', 0, '      ', 317.5260221679795)
('3_28', '      ', 2, '      ', 6, '       ', 0, '      ', 6023.333332270619)
('4_8', '      ', 3, '      ', 7, '       ', 0, '      ', 304.4910794214727)
('4_9', '      ', 3, '      ', 8, '       ', 0, '      ', 928.398021398034)
('5_9', '      ', 4, '      ', 8, '       ', 0, '      ', 474.6085670664503)
('6_8', '      ', 5, '      ', 7, '       ', 0, '      ', 191.01288690406273)
('8_10', '      ', 7, '      ', 9, '       ', 0, '      ', 202.90576461568656)
('9_10', '      ', 8, '      ', 9, '       ', 0, '      ', 279.1586078914887)
('28_10', '      ', 6, '      ', 9, '       ', 0, '      ', 4926.045497413188)
('29_28', '      ', 10, '      ', 6, '       ', 0, '      ', 248.51380148122834)

assignments

{'task0': 'node2', 'task1': 'node3', 'task2': 'node4', 'task3': 'node5', 'task4': 'node6', 'task5': 'node7', 'task6': 'node29', 'task7': 'node9', 'task8': 'node10', 'task9': 'node11', 'task2-dup': 'node30', 'UPDATED_DAG_FILE_WITH_DUPICATION': '11\ntask0 1 true task1 task2 task3 task4 task5 task2-dup\ntask1 1 true task7 task8\ntask2 1 true\ntask3 1 true task7 task8\ntask4 1 true task8\ntask5 1 true task7\ntask6 1 true task9\ntask7 3 true task9\ntask8 3 true task9\ntask9 3 true home\ntask2-dup 1 true task6\n'}
Assign random master and slaves
 * Serving Flask app "master" (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://0.0.0.0:8888/ (Press CTRL+C to quit)

