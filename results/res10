#############################################################################################
                                   result for tpheft
#############################################################################################
==============================================
               print task info
==============================================
task_number            task_uprank
(0, '              ', 8782.847407479245)
(1, '              ', 6057.603512116013)
(2, '              ', 2972.943507999757)
(3, '              ', 283)
==============================================
               print processor info
==============================================
processor_number     task_number     start_time     end_time
('     ', 2, '      ', 0, '    ', 0, '    ', 237)
('     ', 3, '      ', 2, '    ', 0, '    ', 179)
('     ', 4, '      ', 3, '    ', 0, '    ', 216)
('     ', 13, '      ', 1, '    ', 0, '    ', 808)
==============================================
               print link info
==============================================
link_name    start_task_num   end_task_num   start_time   end_time
('2_13', '      ', 0, '      ', 1, '       ', 0, '      ', 5455.783008189575)
('3_4', '      ', 2, '      ', 3, '       ', 0, '      ', 159.67909789799364)
('13_3', '      ', 1, '      ', 2, '       ', 0, '      ', 4991.548942343192)

-------------------------------
current system bottleneck: 2_13
task ids to dup, task ids to recv, files_to_dst, files_from_src
[0]
[1]
[32768]
{}
procid to max time
{0: 5491.229314953559, 1: 5451.1855464985365, 5: 5244.576845501984, 6: 5440.524484655177, 7: 5416.88645830811, 8: 3005.5789722579457, 9: 2986.0344887168517, 10: 3094.58827941667, 11: 3197.9402741733834, 12: 443, 14: 296}
chosen node id, min btnk, task ids to dup, tak ids to recv, parent tasks, files to dest, files from src
(14, 296, [0], [1], [], [32768], {})
-------------------------------
Conclusion for this round of duplication: chose new node and duplicate following tasks on it
(14, [0])
task numbers: ori to dup, dup to ori
{0: 4}
{4: 0}
original data matrix
[[-1, 32768, -1, -1], [-1, -1, 28672, -1], [-1, -1, -1, 36864], [-1, -1, -1, -1]]
updated data transfer matrix with task duplication
[[-1, -1, -1, -1, -1], [-1, -1, 28672, -1, -1], [-1, -1, -1, 36864, -1], [-1, -1, -1, -1, -1], [-1, 32768, -1, -1, -1]]
updated task names with dupicated tasks
['task0', 'task1', 'task2', 'task3', 'task0-dup']
new_link to dst
14_13
(4, ' ', 1, ' ', 0, ' ', 261.62577637122837)



Output of HEFT scheduler
#############################################################################################
                                 result for rand + dup
#############################################################################################
==============================================
               print task info
==============================================
task_number            task_uprank
(0, '              ', 8782.847407479245)
(1, '              ', 6057.603512116013)
(2, '              ', 2972.943507999757)
(3, '              ', 283)
(4, '              ', 8782.847407479245)
==============================================
               print processor info
==============================================
processor_number     task_number     start_time     end_time
('     ', 2, '      ', 0, '    ', 0, '    ', 237)
('     ', 3, '      ', 2, '    ', 0, '    ', 179)
('     ', 4, '      ', 3, '    ', 0, '    ', 216)
('     ', 13, '      ', 1, '    ', 0, '    ', 808)
('     ', 14, '      ', 4, '    ', 0, '    ', 296)
==============================================
               print link info
==============================================
link_name    start_task_num   end_task_num   start_time   end_time
('2_13', '      ', 0, '      ', 1, '       ', 0, '      ', 5455.783008189575)
('3_4', '      ', 2, '      ', 3, '       ', 0, '      ', 159.67909789799364)
('13_3', '      ', 1, '      ', 2, '       ', 0, '      ', 4991.548942343192)
('14_13', '      ', 4, '      ', 1, '       ', 0, '      ', 261.62577637122837)

assignments

{'task0': 'node3', 'task1': 'node14', 'task2': 'node4', 'task3': 'node5', 'UPDATED_DAG_FILE_WITH_DUPICATION': '5\ntask0 1 true\ntask1 1 true task2\ntask2 1 true task3\ntask3 1 true home\ntask0-dup 1 true task1\n', 'task0-dup': 'node15'}
Assign random master and slaves
 * Serving Flask app "master" (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://0.0.0.0:8888/ (Press CTRL+C to quit)
('Recieved request for current mapping. Current mappings done:', 6)
{'task0': 'node3', 'task1': 'node14', 'task2': 'node4', 'task3': 'node5', 'UPDATED_DAG_FILE_WITH_DUPICATION': '5\ntask0 1 true\ntask1 1 true task2\ntask2 1 true task3\ntask3 1 true home\ntask0-dup 1 true task1\n', 'task0-dup': 'node15'}
10.244.0.1 - - [24/Sep/2020 04:11:42] "GET / HTTP/1.1" 200 -

